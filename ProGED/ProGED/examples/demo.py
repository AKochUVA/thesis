# %% # 0.) import modules and set a random seed
import sys
import numpy as np
from hyperopt import hp
# sys.path += [".", ".."]

from ProGED.examples.ode_examples import example_tB_data  # import datasets T, X and Y
from ProGED.parameter_estimation import fit_models
from ProGED.generate import generate_models
from ProGED.generators.grammar import GeneratorGrammar
from ProGED.examples.tee_so import Tee
from ProGED.parameter_estimation import DE_fit, DE_fit_metamodel, hyperopt_fit

# 0.1) save output into randomly named logfile:
random = str(np.random.random())
print("Random number for log filename:", random)
# Tee("logfile_demo_" + random + ".txt")
np.random.seed(2)

# 1.) construct dataset
T, Ys, Xs, _, a = example_tB_data()  # dataset constructed in odes.py
X = np.array([Xs]).T; Y = np.array([Ys]).T  # convert in conformed shape

# 2.) generate grammar and models:
grammar = GeneratorGrammar("""S -> S '+' T [0.4] | T [0.6]
                            T -> V [0.6] | 'C' "*" V [0.4]
                            V -> 'x' [0.5] | 'y' [0.5]""")
symbols = {"x":['y', 'x'], "start":"S", "const":"C"}
# models = generate_models(grammar, symbols, strategy_settings={"N":20})
models = generate_models(grammar, symbols, strategy_settings={"N":4})

# 3.) discover the right equation
data = np.hstack((T.reshape(-1,1), X, Y))
models = fit_models(models, data, target_variable_index=-1, time_index=0, task_type="differential",
                    # estimation_settings={"optimizer": 'metamodel', "verbosity": 4}
                    # estimation_settings={"optimizer": 'differential_evolution', "verbosity": 1}
                    # hyperopt:
                    estimation_settings={
                        "optimizer": 'hyperopt',
                        # "hyperopt_space_fn": hp.quniform,
                        "hyperopt_space_fn": hp.qnormal,
                        # "hyperopt_space_args": (-13, 13, 1/100),  # 1/100 ... ne razlikuje 0.123 in 0.124
                        "hyperopt_space_args": (0.4, 2, 1/1000),  # 1/100 ... ne razlikuje 0.123 in 0.124
                        }
                    )

# 4.) print models' results
print("\n", models, "\n\nFinal score:")
for m in models:
    print(f"model: {str(m.get_full_expr()):<30}; error: {m.get_error():<15}")
print("\n While dataset was generated by diff. eq. ẏ = 0.4·y + x   ")

# # %% # 5.) check solution of ODE graphically
# from parameter_estimation import ode
# import matplotlib.pyplot as plt 
# # %%
# our_win_model = [m for m in models][2]
# odeY = ode([our_win_model], [our_win_model.params], T, X, Y[0])
# plt.plot(T, Y,"r-")
# plt.show()
# plt.plot(T, odeY[0], "k--")
